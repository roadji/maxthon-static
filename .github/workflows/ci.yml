name: CI/CD Pipeline

on:
  push:
    branches: [main, master, feature/*]
  pull_request:
    branches: [main, master]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'test_password_123' }}
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
    
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask pytest-mock flake8
    
    - name: Run flake8 linting (critical errors only)
      working-directory: backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests with coverage
      working-directory: backend
      run: |
        pytest tests/ --cov=. --cov-report=term
      env:
        DATABASE_URL: postgresql://postgres:${{ secrets.TEST_DB_PASSWORD || 'test_password_123' }}@localhost:5432/test_db

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Type check with TypeScript
      working-directory: frontend
      run: npx tsc --noEmit
    
    - name: Check code formatting with Prettier (non-blocking)
      working-directory: frontend
      run: |
        npx prettier --check . --ignore-path .prettierignore || echo "Prettier formatting issues found - consider running 'npx prettier --write .'"
      continue-on-error: true
    
    - name: Run Jest tests
      working-directory: frontend
      run: npm test -- --watchAll=false
    
    - name: Build application
      working-directory: frontend
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'HIGH,CRITICAL'
        exit-code: '0'  # Make non-blocking for now
    
    - name: Check npm audit (frontend)
      working-directory: frontend
      run: |
        npm audit --audit-level moderate || echo "npm audit found issues - review and update dependencies"
      continue-on-error: true
    
    - name: Check Python safety (backend)
      working-directory: backend
      run: |
        pip install safety
        safety scan --output text || echo "Python safety check found issues - review and update dependencies"
      continue-on-error: true

  deploy-production:
    needs: [backend-test, frontend-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
    
    - name: Deploy to Render (Backend)
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"

  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "Deployment completed with status: ${{ needs.deploy-production.result }}"
